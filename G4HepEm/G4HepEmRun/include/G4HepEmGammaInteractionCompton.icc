#include "G4HepEmGammaInteractionCompton.hh"

#include "G4HepEmTLData.hh"
#include "G4HepEmData.hh"

#include "G4HepEmElectronTrack.hh"
#include "G4HepEmGammaTrack.hh"

#include <iostream>

void G4HepEmGammaInteractionCompton::Perform(G4HepEmTLData* tlData, struct G4HepEmData* /*hepEmData*/) {
  G4HepEmTrack* thePrimaryTrack = tlData->GetPrimaryGammaTrack()->GetTrack();
  const double       thePrimGmE = thePrimaryTrack->GetEKin();
  // low energy limit: both for the primary gamma and secondary e-
  const double theLowEnergyThreshold = 0.0001; // 100 eV
  if (thePrimGmE<theLowEnergyThreshold) {
    return;
  }
  // sample the post interaction photon energy and direction (already in lab frame)
  // note: we might need the original photon direction so we keep it here
  double*        thePrimGmDir = thePrimaryTrack->GetDirection();
  const double theOrgGmDir[3] = {thePrimGmDir[0], thePrimGmDir[1], thePrimGmDir[2]};
  // the 'thePrimGmDir' will be updated
  const double     thePostGmE = SamplePhotonEnergyAndDirection(thePrimGmE, thePrimGmDir, theOrgGmDir, tlData->GetRNGEngine());
  // compute the secondary e- energy and check aganints the threshold:
  //  - if below threshold: simple deposit the corresponding energy
  //  - compute the secondary e- direction otherwise and create the secondary track
  const double  theSecElE = thePrimGmE-thePostGmE;
  // keep track of energy deposits due to particles killed below threshold
  double theEnergyDeposit = 0.0;
  if (theSecElE > theLowEnergyThreshold) {
    // get a secondary e- track and sample/compute directions (all will be already in lab. frame)
    G4HepEmTrack* theSecTrack = tlData->AddSecondaryElectronTrack()->GetTrack();
    double*       theSecElDir = theSecTrack->GetDirection();
    theSecElDir[0] = thePrimGmE * theOrgGmDir[0] - thePostGmE * thePrimGmDir[0];
    theSecElDir[1] = thePrimGmE * theOrgGmDir[1] - thePostGmE * thePrimGmDir[1];
    theSecElDir[2] = thePrimGmE * theOrgGmDir[2] - thePostGmE * thePrimGmDir[2];
    // normalisation
    const double  norm = 1.0 / std::sqrt(theSecElDir[0] * theSecElDir[0] + theSecElDir[1] * theSecElDir[1] + theSecElDir[2] * theSecElDir[2]);
    theSecElDir[0] *= norm;
    theSecElDir[1] *= norm;
    theSecElDir[2] *= norm;
    // set other properties of the secondary track as well
    theSecTrack->SetEKin(theSecElE);
    theSecTrack->SetParentID(thePrimaryTrack->GetID());
  } else {
    theEnergyDeposit += theSecElE;
  }
  //
  // check the post interaction gamma energy aganints the threshold:
  //  - if below threshold: simple deposit the corresponding energy
  if (thePostGmE > theLowEnergyThreshold) {
    thePrimaryTrack->SetEKin(thePostGmE);
  } else {
    theEnergyDeposit += thePostGmE;
    thePrimaryTrack->SetEKin(0.0);
  }
  thePrimaryTrack->SetEnergyDeposit(theEnergyDeposit);
}
